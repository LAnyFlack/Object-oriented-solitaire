package base;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Label;
import java.awt.Robot;
import java.awt.TextField;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

import test.Test2;

public class Card  extends JPanel{
	private int positionx=0;
	private int positiony=0;
	private int length=0;
	private int width=0;
	private int point=0;
	private boolean ifsetup=false;
	private boolean isontop=true;
	private int color;
	private int patten;
	private Card upsideone;
	private JLabel Label1;
	private JLabel Label2;
	private JPanel panel1;
	public boolean isdown;
	
	//构造函数
	public Card(int px,int py,boolean x,int huase,int poi){
		positionx=px;
		positiony=py; 
		patten=huase;
		ifsetup=x;
		point=poi;
		if(patten==0||patten==1) 
			color=0;//black
		else
			color=1;//red
		
		this.setLayout(null);
		Label1=new JLabel("");
		Label2=new JLabel("");
		panel1=new JPanel();
		Label1.setBounds(7, 25, 20, 20);
		Label2.setBounds(6, 5, 20, 20);
		panel1.setBounds(22, 22, 58, 91);
		if(ifsetup)
			setupCard();
		else
			setupdCard();
		this.add(panel1);
		this.add(Label1);
		this.add(Label2);

		this.setBounds(px, py, 102, 135);
		this.addMouseListener(new MouseeListener());
		setOpaque(false);
	}
	
	public void setLocation(int x,int y) {
		this.setBounds(x, y, 102, 135);
	}

	
	//将正面的卡片翻反
	public void upsidedown() {
		ifsetup=false;
 	    Timer timer1 = new Timer(); 
        timer1.scheduleAtFixedRate(new TimerTask() {
        	int i=1;
            public void run() {
                //System.out.println(i);
                setBounds(positionx, positiony, 100-5*i, 135);
                i++;
                if(i==20) {
                	setBackground(Color.gray);
                	setBorder(BorderFactory.createLineBorder(Color.gray, 22, true));
				    Label2.setIcon(new ImageIcon(""));
				    Label1.setIcon(new ImageIcon(""));
				    panel1.setBackground(Color.gray);
				    timer1.cancel();
                }
            }
        },0, 20);
        

        Timer timer2 = new Timer(); 
        timer2.scheduleAtFixedRate(new TimerTask() {
        	int i=1;
            public void run() {
                //System.out.println(i);
                setBounds(positionx, positiony, 2+5*i, 135);
                i++;
                if(i==21) {
                	setBackground(Color.gray);
				       	timer2.cancel();
                }
            }
        }, 400, 20);  	
	}
	
	//将反面的的卡片翻正
	public void downsideup() {
		ifsetup=true;
		 Timer timer1 = new Timer(); 
	        timer1.scheduleAtFixedRate(new TimerTask() {
	        	int i=1;
	            public void run() {
	                //System.out.println(i);
	                setBounds(positionx, positiony, 100-5*i, 135);
	                i++;
	                if(i==20) {
	                	setupCard();
					    timer1.cancel();
	                }
	            }
	        },0, 20);
	        

	        Timer timer2 = new Timer(); 
	        timer2.scheduleAtFixedRate(new TimerTask() {
	        	int i=1;
	            public void run() {
	                //System.out.println(i);
	                setBounds(positionx, positiony, 2+5*i, 135);
	                i++;
	                if(i==21) {
	                	setBackground(Color.white);
					       	timer2.cancel();
	                }
	            }
	        }, 400, 20);  	
	}
	
	//设置初始正面向上的卡片
	public void setupCard() {
			this.setBackground(Color.white);
			this.setBorder(BorderFactory.createLineBorder(Color.white, 22, true));
			panel1.setBackground(Color.white);
			
			if(patten==0)//meihua
				Label1.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\mh.png"));
			else if(patten==1)//heitao
				Label1.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\bt.png"));
			else if(patten==2)//hongtai
				Label1.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\ht1.png"));
			else if(patten==3)//fangpian
				Label1.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\fp.png"));
			
			if(color==0) {
				if(point==1)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\ba.png"));
				else if(point==2)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b2.png"));
				else if(point==3)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b3.png"));
				else if(point==4)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b4.png"));
				else if(point==5)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b5.png"));
				else if(point==6)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b6.png"));
				else if(point==7)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b7.png"));
				else if(point==8)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b8.png"));
				else if(point==9)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b9.png"));
				else if(point==10)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\b10.png"));
				else if(point==11)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\bj.png"));
				else if(point==12)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\bq.png"));
				else if(point==13)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\bk.png"));
			}
			else if(color==1) {
				if(point==1)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\ra.png"));
				else if(point==2)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r2.png"));
				else if(point==3)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r3.png"));
				else if(point==4)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r4.png"));
				else if(point==5)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r5.png"));
				else if(point==6)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r6.png"));
				else if(point==7)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r7.png"));
				else if(point==8)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r8.png"));
				else if(point==9)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r9.png"));
				else if(point==10)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\r10.png"));
				else if(point==11)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\rj.png"));
				else if(point==12)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\rq.png"));
				else if(point==13)
					Label2.setIcon(new ImageIcon("D:\\\u53E6\\\u9762\u5411\u5BF9\u8C61\\image\\rk.png"));
			}
	}
	
	//设置初始反面向上的卡片
	public void setupdCard(){
		this.setBackground(Color.gray);
		this.setBorder(BorderFactory.createLineBorder(Color.gray, 22, true));
		panel1.setBackground(Color.gray);
	}
	
	//将卡片翻面
	public void swap() {
		if(ifsetup) {
    		upsidedown();
    	}
    	else{
    		downsideup();
    	}
	}
	
	public void toright() {
		ifsetup=true;
 	    Timer timer1 = new Timer(); 
        timer1.scheduleAtFixedRate(new TimerTask() {
        	int i=1;
            public void run() {
                //System.out.println(i);
                setBounds(positionx+5*i, positiony, 100-5*i, 135);
                i++;
                if(i==20) {
                	setupCard();
				    timer1.cancel();
                }
            }
        },0, 20);


        Timer timer2 = new Timer(); 
        timer2.scheduleAtFixedRate(new TimerTask() {
        	int i=1;
            public void run() {
                //System.out.println(i);
                setBounds(positionx+102, positiony, 2+5*i, 135);
                i++;
                if(i==21) {
                	setBackground(Color.gray);
				       	timer2.cancel();
                }
            }
        }, 400, 20);  	
	}
	public void toleft() {
		ifsetup=false;
 	    Timer timer1 = new Timer(); 
        timer1.scheduleAtFixedRate(new TimerTask() {
        	int i=1;
            public void run() {
                //System.out.println(i);
                setBounds(positionx, positiony, 100-5*i, 135);
                i++;
                if(i==20) {
                	setBackground(Color.gray);
                	setBorder(BorderFactory.createLineBorder(Color.gray, 22, true));
				    Label2.setIcon(new ImageIcon(""));
				    Label1.setIcon(new ImageIcon(""));
				    panel1.setBackground(Color.gray);
				    timer1.cancel();
                }
            }
        },0, 20);
        

        Timer timer2 = new Timer(); 
        timer2.scheduleAtFixedRate(new TimerTask() {
        	int i=1;
            public void run() {
                //System.out.println(i);
                setBounds(positionx-5*i, positiony, 2+5*i, 135);
                i++;
                if(i==21) {
                	setBackground(Color.gray);
				       	timer2.cancel();
                }
            }
        }, 400, 20);  	
	}
	public void tootherside() {
		if(ifsetup) {
			toleft();
    	}
    	else{
    		toright();
    	}
	}
	
	public class MouseeListener  implements MouseMotionListener,MouseListener{
		Frame frame = new Frame("关于鼠标的多重监听器");
		TextField tField = new TextField(30);
		@Override
		public void mouseClicked(MouseEvent e) {
			// TODO Auto-generated method stub
			//System.out.print("鼠标点击----" + "\t");
			if (e.getClickCount()==1) {
				tootherside();
				//toleft();
				//toright();
			} 
			else if (e.getClickCount()==2) {
				System.out.println("双击！");
			} 
			else if (e.getClickCount()==3) {
				System.out.println("三连击！！");
			}
			
		}
	 
		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			isdown=true;
			//System.out.println("鼠标按下");
			//setBounds(e.getX(), e.getY(), 102, 135);
			//System.out.println("鼠标拖动到位置：（" + e.getX() + "，" + e.getY() +"）");
		}
	 
		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			//System.out.println("鼠标松开");
			isdown=false;
		}
	 
		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			//tField.setText("鼠标已经进入窗体");
		}
	 
		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			//tField.setText("鼠标已经移出窗体");
		}
	 
		@Override
		public void mouseDragged(MouseEvent e) {
			// TODO Auto-generated method stub
			//String string = "鼠标拖动到位置：（" + e.getX() + "，" + e.getY() +"）";
			//tField.setText(string);
		}
	 
		@Override
		public void mouseMoved(MouseEvent e) {
			// TODO Auto-generated method stub
		}
	
	}
}